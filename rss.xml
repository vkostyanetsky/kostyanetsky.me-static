<rss version="2.0">
    <channel>    
        <title>Vlad Kostyanetsky</title>
        <description>Hello! My name is Vlad, I'm business app developer.</description>
        <language>en</language>
        <link>https://kostyanetsky.me</link>
        <lastBuildDate>Sun, 12 May 2024 17:50:58 +0700</lastBuildDate>
        
        <item>
            <title>Timesheet for Obsidian</title>
            <link>https://kostyanetsky.me/notes/obsidian-timesheet</link>
            <guid isPermaLink="false">note-obsidian-timesheet</guid>
            <pubDate>Sun, 12 May 2024 17:50:58 +0700</pubDate>
            <description><p>I made another <a href="https://obsidian.md" target="_blank">Obsidian</a> plugin, this time for <a href="https://help.obsidian.md/Plugins/Daily+notes" target="_blank">daily notes</a>. Draws a nice report: what tasks I worked on, what I did, and how much time I spent. I tried to describe how it works in the <a href="https://github.com/vkostyanetsky/ObsidianTimesheet" target="_blank">repository</a>; will be glad to receive any feedback!</p>
<p>Funny thing: for the examples in the README, I used issues like FBI-1, FBI-2, and so on. This is not a reference to the X-Files or Twin Peaks — it's just the first prefix that came to mind. The fact is that our internal project for the development of FirstBit ERP is called First Bit Internal, abbreviated as FBI :) The main pool of tasks we are working on is created and tracked in it.</p>
<p>We’re already used to it, but our colleagues outside the company always find our screenshots from JIRA or SonarQube amusing.</p></description>
        </item>
        
        <item>
            <title>One Query More, One Query Less</title>
            <link>https://kostyanetsky.me/notes/payment-terms</link>
            <guid isPermaLink="false">note-payment-terms</guid>
            <pubDate>Sun, 05 May 2024 21:25:48 +0700</pubDate>
            <description><p>One query more, one query less — it doesn’t matter, people often say. Like, the main thing is that the query must be cheap: it doesn’t read too much, uses index, and so on.</p>
<p>This point of view makes sense, but mindlessly machine-gunning queries is a dangerous idea. Even if everything looks good at the moment, the system may change slightly in the future. And then a seemingly harmless patch will burn your production server to the ground right on Friday.</p>
<p>Let me tell you about one example from recent practice. There is an ERP that contains a table with payment stages for customer orders. One of these stages is prepayment; until it is received, you cannot create an order for the supplier.</p>
<p>Technically, the purchase order simply stores the customer's order ID; if the field is filled (that is, if the purchase order is created by the customer's order), ERP needs to read the payment stages of the customer's order and understand whether the purchase can be made.</p>
<p>It sounds elementary, but monitoring shows that the operation is slow as hell and eats up memory as if it were the last time. </p>
<p>Welp, let's go find out. We saw something like this:</p>
<p><img alt="825701 records" src="https://kostyanetsky.me/notes/payment-terms/payment-terms.png"/></p>
<p>What do we have here? Instead of taking two or three stages of payment for an order, ERP receives almost a million! How this could be possible?</p>
<p>It turned out that the problem was with those purchase orders that were not related to customer orders at all. The developer considered that the logic for them could not be changed: the customer’s order ID is empty and the query will not find payment stages for this ID. This means that the same result will be obtained as if there were no query at all. And an extra query — well... One query more, one query less... Not a big deal.</p>
<p>The deal turned out to be big. The table of payment stages contained data not only for customer orders, but also for other types of documents. Their customer order ID field was empty. As a result, ERP, when trying to find payment stages using an empty customer order ID, unexpectedly found them.</p>
<p>The query read about a gigabyte of data and wrote it to a temporary table. A gigabyte was read, then a gigabyte was written... History hit the disk, the DBMS buffer cache, and other components of the system (even the network, which had to drive this gigabyte back and forth without any benefit).</p>
<p>Do you know what I think? If the result of a query is known, there is probably no need to do it after all.</p></description>
        </item>
        
        <item>
            <title>Foodiary for Obsidian</title>
            <link>https://kostyanetsky.me/notes/obsidian-foodiary</link>
            <guid isPermaLink="false">note-obsidian-foodiary</guid>
            <pubDate>Sun, 14 Apr 2024 22:36:58 +0700</pubDate>
            <description><p>Following my <a href="https://kostyanetsky.me/notes/obsidian-fastimer" target="_blank">first</a> plugin for Obsidian, I released <a href="https://github.com/vkostyanetsky/ObsidianFoodiary" target="_blank">the second one</a> a couple of weeks ago. Counts calories, proteins, fats, and carbohydrates in food. It helps not to overeat out of nowhere — it’s rather difficult to judge by eye how much you’ve eaten today and whether you can afford that donut.</p>
<p>In short, a useful thing if you:</p>
<ol>
<li>Fatty (like me)</li>
<li>Want to stop being fatty (like me)</li>
<li>You take notes in Obsidian (like me) 🙂</li>
</ol>
<p>In fact, there is a lot of software for this task. I tried some of them but was dissatisfied: it either has terrible design, is bugged, or is constantly trying to sell me a monthly subscription. In short, it's more annoying than helpful. I wanted something native, built into the usual routine; so, if routine settles in Obsidian, then the solution seems to suggest itself.</p>
<p>You can install the plugin directly from the program — the developers have already approved it. Otherwise, everything is simple: you write in a daily note what you ate and how much it weighed, and you receive a simple table sorted by calories with numbers by proteins, fats, and carbohydrates.</p>
<p>There are examples in the repository at the link above.</p></description>
        </item>
        
        <item>
            <title>Fastimer&#x27;s Look</title>
            <link>https://kostyanetsky.me/notes/callouts-for-fastimer</link>
            <guid isPermaLink="false">note-callouts-for-fastimer</guid>
            <pubDate>Sat, 09 Mar 2024 17:44:32 +0700</pubDate>
            <description><p>I just implemented <a href="https://kostyanetsky.me/notes/obsidian-fastimer" target="_blank">Fastimer</a>'s rendering through callouts: this is an Obsidian mechanic that allows you to turn an ordinary quote into a designed block of text that attracts the reader's attention. You've probably seen blocks like “advice” and “pay attention” — these are callouts.</p>
<p>You can read more in <a href="https://help.obsidian.md/Editing+and+formatting/Callouts" target="_blank">Obsidian Help</a>. </p>
<p>As a result, the timer now takes on a different color depending on the state: blue for an active fast, green for completed, and red for a failed one.</p>
<p>In addition, I made the text more compact and worked on styling:</p>
<p><img alt="Example" src="https://kostyanetsky.me/notes/callouts-for-fastimer/example.png"/></p>
<p>It turned out to be way nicer than the block of preformatted text as it was before.</p></description>
        </item>
        
        <item>
            <title>Small Pleasures</title>
            <link>https://kostyanetsky.me/notes/small-pleasures</link>
            <guid isPermaLink="false">note-small-pleasures</guid>
            <pubDate>Wed, 06 Mar 2024 21:22:43 +0700</pubDate>
            <description><p>I was wasting time at the supermarket checkout: it’s evening, there aren’t many customers anymore, but the elderly cashier is clearly tired and isn’t in too much of a hurry. Standing in front a tall, gray-haired man with a luxurious beard whiles away the time studying the rack of chocolates next to the cash register.</p>
<p>Finally, he takes a Snickers, twirls it in his hands thoughtfully. Then he pushes two more towards himself and, broadly, with visible pleasure, smiles into his mustache :)</p></description>
        </item>
        
        <item>
            <title>Not Only Everything</title>
            <link>https://kostyanetsky.me/notes/not-only-everything</link>
            <guid isPermaLink="false">note-not-only-everything</guid>
            <pubDate>Sun, 25 Feb 2024 22:49:48 +0700</pubDate>
            <description><p>This commentary in the documentation for the WriteJSON() method of XDTOSerializer is enviably deep, I would say:</p>
<p><img alt="Not only everyhing" src="https://kostyanetsky.me/notes/not-only-everything/write-json.jpg"/></p>
<p>Well, yes. The method dumps data into JSON, not XML. So it’s hard to argue that not all value types can be packed into XML using it (to be precise, none). Such a pity that there is an obvious copy-paste from the help for WriteXML() further in the text! I almost decided that it was an Easter egg from the developers :)</p></description>
        </item>
        
        <item>
            <title>Fastimer for Obsidian</title>
            <link>https://kostyanetsky.me/notes/obsidian-fastimer</link>
            <guid isPermaLink="false">note-obsidian-fastimer</guid>
            <pubDate>Tue, 13 Feb 2024 01:08:58 +0700</pubDate>
            <description><p>The <a href="https://obsidian.md/" target="_blank">Obsidian</a> developers recently approved one of my TypeScript pet plugins — <a href="https://github.com/vkostyanetsky/ObsidianFastimer" target="_blank">Fastimer</a>. It is an intermittent fasting tracker that adds a new code block to your vault: you enter the start date of the fasting interval and get the date of its finish, the time until this moment, and a list of the zones to be passed.</p>
<p>The block shows an up-to-date picture every time Obsidian renders it, which means you can monitor your progress in real time. When a fasting window ends, you can enter the end date, and the code block will show the result: whether you managed to achieve the goal, how much time you fasted beyond the plan, and so on.</p>
<p>I'm thinking of improving the visual part a bit (currently, everything is displayed as plain text without any design). In addition, I want to add functions for calculating statistics so that you can draw cute graphs like <a href="https://charts.phib.ro/Meta/Charts/Charts+Documentation" target="_blank">Charts </a> and show achievements. I already made the same in implementing the same <a href="https://github.com/vkostyanetsky/Fastimer" target="_blank">application</a> in Python, but I’m unlikely to return to it — it’s easier to solve the task in the Obsidian vault than to roll out an additional utility.</p>
<p>In short, check out the plugin! :) You can find it by name (Fastimer) in the Obsidian library, or install it manually from the repository.</p></description>
        </item>
        
        <item>
            <title>Do? Do Not?</title>
            <link>https://kostyanetsky.me/notes/do-not</link>
            <guid isPermaLink="false">note-do-not</guid>
            <pubDate>Sun, 14 Jan 2024 22:25:45 +0700</pubDate>
            <description><p>Among our projects, we have one where two systems are communicating with each other: ERP and CRM. Data exchange is done well: a push'n'pull server has been set up, subscriptions to events have been registered, a REST API has been implemented, and so on. There are many other fascinating technical details, but I'm not talking about that now.</p>
<p>The exchange has various logic chains inside. For instance, if a new company appears in CRM, it sends the data to ERP. The other day, a problem appeared: a company was not sent from the CRM, no matter how many times you tried to write it. So we went to investigate, suspecting the worst: CRM is written in PHP (nothing personal; it’s just not our technical stack), and there’s a lot of different legacy stuff there. It's easier to shoot yourself in the foot than to blow your nose.</p>
<p>However, it didn't take much digging. We opened the company’s page in CRM and saw that he had the “Do Not Export To ERP” checkbox, which, in fact, blocked the sending. A manager made an obvious mistake.</p>
<p>Should we uncheck the box and close the ticket?</p>
<p><img alt="Well yes, but actually no" src="https://kostyanetsky.me/notes/do-not/actually.jpg"/></p>
<p>This will solve the problem with that particular company, but not the reason it appeared. It is actually in the interface, specifically in the name of the option: “do not” is used, which is advisable to avoid due to the fact that it is more difficult for users to read the wording correctly. By the way, this also applies to a simple “do”.</p>
<p>It is often difficult for programmers to understand why this is so: we are used to instantly calculating Boolean expressions in our heads, and variations like “not (not true)” are commonplace for us. But people with a different background can get confused. Just a little, but sometimes this is enough for them to perceive “do not export” as “do export” in the heat of the day, click the option, and move on.</p>
<p>To sum up, the solution is to rename the checkbox. “Disable Export” or “Stop Export” are both fine, for example. “Prohibit Export” also comes to mind, but it’s more about interpersonal relationships, and in general, a ban on doing something does not mean that it won’t be done :)</p></description>
        </item>
        
        <item>
            <title>Last Meth</title>
            <link>https://kostyanetsky.me/notes/last-meth</link>
            <guid isPermaLink="false">note-last-meth</guid>
            <pubDate>Sun, 17 Dec 2023 19:34:42 +0700</pubDate>
            <description><p>I'm digging into the code of an external component for 1C platform, published by its developers as an example. The good thing is: well, it can be compiled and if you tweak it a little — it does the job.</p>
<p>As for other things, there are a lot of bruh moments. For example, the project can't be opened in modern Visual Studio (you need to specify CMake manually). The code is quite sloppy; there is no documentation, comments, or formatting. Long story short: I believe, it can be difficult for a developer without solid experience in C++ to get the hang of this.</p>
<p>Was a bit amused by the naming in the code below:</p>
<pre><code>long CAddInNative::FindMethod(const WCHAR_T* wsMethodName)
{ 
    long plMethodNum = -1;
    wchar_t* name = 0;

    ::convFromShortWchar(&amp;name, wsMethodName);

    plMethodNum = findName(g_MethodNames, name, eMethLast);

    if (plMethodNum == -1)
        plMethodNum = findName(g_MethodNamesRu, name, eMethLast);

    delete[] name;

    return plMethodNum;
}
</code></pre>
<p>I see here the inexplicable love for abbreviations. What made the author name the variable “eMethLast”, not “eMethodLast”? They already created "wsMethodName" and "plMethodNum", after all.</p>
<p>Perhaps this is an Easter egg with a reference to Breaking Bad. Then I like it for sure :)</p></description>
        </item>
        
        <item>
            <title>Wrong Freeway Entrance</title>
            <link>https://kostyanetsky.me/notes/wrong-freeway-entrance</link>
            <guid isPermaLink="false">note-wrong-freeway-entrance</guid>
            <pubDate>Tue, 14 Nov 2023 09:34:10 +0700</pubDate>
            <description><blockquote>
<p>Have you ever taken the wrong freeway entrance? You need to drive to the next exit to turn around, but you hate every inch of travel because you're going away from your goal.</p>
<p><em>― Andy Weir, "The Martian"</em></p>
</blockquote>
<p>Programmers have exactly the same emotions when they spend a long time working on something. They suddenly realize that part of it should be designed differently. Moreover, this is exactly what you have to do since it solves several problems at once. This is where technical debt is born. </p>
<p>However, right now you don’t change anything but continue to work with the part of the code that already exists. After all, you are professional, and you have a release date! You have to make it on time and then pay the debt, but you hate every inch of code you write because you're going away from your goal.</p></description>
        </item>
        
    </channel>
</rss>