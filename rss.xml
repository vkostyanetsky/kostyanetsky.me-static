<rss version="2.0">
    <channel>    
        <title>Vlad Kostyanetsky</title>
        <description>Hello! My name is Vlad, I'm business app developer.</description>
        <language>en</language>
        <link>https://kostyanetsky.me</link>
        <lastBuildDate>Wed, 15 Sep 2021 21:47:48 +0700</lastBuildDate>
        
        <item>
            <title>Hammer &amp; Nails</title>
            <link>https://kostyanetsky.me/notes/hammer-and-nails</link>
            <guid isPermaLink="false">note-hammer-and-nails</guid>
            <pubDate>Wed, 15 Sep 2021 21:47:48 +0700</pubDate>
            <description><p>I was developing payment documents in our configuration last week and came across an incredibly redundant solution to a primitive problem. Sorry, I can't keep to myself.</p>
<p>Just imagine: you have a document, which contains several tabular sections. Each of them has a comment field. You make a print form for this document; if at least one row of any TS contains a comment — you need to use one template 1, if there are no comments — template 2.</p>
<p>The task is pretty primitive, isn't it? All of us have done something like this a million times. Just read the selection, use IsBlankString() on the comment field and load the appropriate template. Coffee time!</p>
<p>However, instead of a short cycle, I saw this:</p>
<script src="https://gist.github.com/vkostyanetsky/e870d5bb3d2f23d93f3d17001eaef59b.js">Gist</script>
<p>There is a chain of queries, in the lowest of which we scan all the TS (which, I remind you, we just raked out for printing). We are looking for comments in them, then we group the result several times and return it to the script.</p>
<p>Well, I'm not even talking about the load on the DBMS (I would venture to guess that this trick doesn't give a noticeable effect — after all, the selection is going to be small). It's just… Well… Checking a selection of rows is, like, five lines of code. Clear, simple, short, Sonar has no room to swear. How could you give birth to this? Because of great love for queries?</p>
<p>You know what? I bet that it's the correct answer. I can almost see this programmer, who has just mastered the query language more or less tolerably. He is in the absolute delight of new opportunities, so… If all you have is a hammer, everything around looks like nails.</p></description>
        </item>
        
        <item>
            <title>Do Not Confuse</title>
            <link>https://kostyanetsky.me/notes/do-not-confuse</link>
            <guid isPermaLink="false">note-do-not-confuse</guid>
            <pubDate>Wed, 16 Mar 2022 20:09:31 +0700</pubDate>
            <description><p><img alt="Code" src="https://kostyanetsky.me/notes/do-not-confuse/do-not-confuse.png"/></p>
<p>If the type of operation is the sale of goods or real estate, then open the common form AdvancesPickFormWithVAT with the parameters defined in the PickParameters structure. The callback is EditPrepaymentOffsetEnd method, defined in the same module; pass it the AdditionalParameters structure. The form needs to be opened so that it locks the whole interface.</p>
<p>However, if the type of operation is a return to the supplier, then open the general form AdvancesPickFormWithVAT with the parameters defined in the PickParameters structure. The callback is the EditPrepaymentOffsetEnd method, defined in the same module; pass it the AdditionalParameters structure. The form needs to be opened so that it locks the whole interface.</p>
<p>I hope you won't confuse.</p></description>
        </item>
        
        <item>
            <title>Environmental Storytelling</title>
            <link>https://kostyanetsky.me/notes/environmental-storytelling</link>
            <guid isPermaLink="false">note-environmental-storytelling</guid>
            <pubDate>Sun, 19 Mar 2023 15:51:48 +0700</pubDate>
            <description><p>I like to notice things in the world around me that clearly have a story behind them. In video games, this is called “environmental storytelling”: they don’t tell you the story directly, but if you look around, you can guess which gun was hanging on the wall and who fired from it.</p>
<p>For example, I recently celebrated the company's 10th anniversary with colleagues at a local golf club. Balls had to be sent flying from the second floor; there are no railings for obvious reasons, but a net is stretched in case someone loses their balance.</p>
<p><img alt="Photo from the club website to make it clearer." src="https://kostyanetsky.me/notes/environmental-storytelling/topgolf.jpeg"/></p>
<p>Why are you talking about this, you ask? Well, there are warnings on the walls: jump into the net of your own free will and pay <abbr title="About two hundred thousand rubles at this moment.">ten thousand dirhams</abbr>. Recording this heroic leap of faith on camera is fine as well, just prepare five thousand more.</p>
<p>Do you feel the smell of a good history? </p>
<p>Another example: once flew to Turkey to rest and decided, just in case, to look through the rules of the airline (what can be taken on board, what can not). Among the list of items prohibited from being carried on board, I found “steel spear” and “steel flail” 😬</p>
<p>UPD: Another great <a href="https://kostyanetsky.me/notes/environmental-storytelling/soundproof.jpeg" target="_blank">example</a> from somewhere on the Internet.</p></description>
        </item>
        
        <item>
            <title>Top Salaries</title>
            <link>https://kostyanetsky.me/notes/top-salaries</link>
            <guid isPermaLink="false">note-top-salaries</guid>
            <pubDate>Sat, 02 Oct 2021 16:49:35 +0700</pubDate>
            <description><blockquote>
<p>There is a path to a CSV file. You need to open it, read the header (first line), find the Salary column and display the top 10 salaries.</p>
<p><em><a href="https://t.me/nikitonsky_chat/26402" target="_blank">Link</a></em></p>
</blockquote>
<p>Threw in my <a href="https://gist.github.com/tonsky/881d5d8c4fbed818fe2905a7591a91e0#file-vkostyanetsky-1c" target="_blank">two cents</a> just to complete the picture. If you forget about stability, readability, and performance — you can cut it in half. Here it was obvious from the very beginning that it would be shorter in bash and clearer in Python, so I just wrote it as I was used to.</p>
<p>What was useful: there are a bunch of examples in other languages ​​in the comments to the post. Frankly speaking, I haven’t come across some of them; it was really curious to look at the syntax and try to understand the way to solve the task.</p>
<p>In general, the whole story reminded Eugene Stepanishev's <a href="https://bolknote.ru/tags/beer99/" target="_blank">hobby</a> — to write the output of the American “beer song” in all languages ​​in a row. By the way, Tonsky's issue looks as fun for me too — too trivial to seriously compare something on its basis.</p>
<p>What was funny: for a couple of <a href="https://t.me/nikitonsky_pub/201?comment=26703" target="_blank">colleagues</a>, the 1C code caused such acute vision problems that they considered it necessary to report it :-) I partly understand the desire to assert itself on the stereotype “1C is bad, mkay?”, but it's the wrong case. The preference in syntax is nothing but a matter of taste, and besides it, the solution in 1C is no different from solutions in any other language without a built-in library for parsing CSV.</p></description>
        </item>
        
        <item>
            <title>REST service for Service Manager</title>
            <link>https://kostyanetsky.me/notes/rest-service-4-sm</link>
            <guid isPermaLink="false">note-rest-service-4-sm</guid>
            <pubDate>Sat, 25 Feb 2023 19:02:49 +0700</pubDate>
            <description><p>This week, I developed a REST service to set up our service manager (this is a configuration for managing a 1cFresh instance). Deploying the development environment is a regular task for us, and every time the manager's database had to be tuned by hand: tweaking the storefront, changing application addresses, overwriting scheduled tasks, and so on.</p>
<p>The implementation was simple. Come up with a JSON structure, write a parser, find a code in the configuration, make it work by external call, and make sure you don't break anything. Routine work, in general, but I love to do such things from time to time: I mean, to look around and try to figure out which of the daily tasks is annoying enough.</p>
<p>This one is a good example. To be frank, setting up the Service Manager wasn't a problem (launching the app and fiddling with the settings), but it was a thing to pay attention &amp; spend time to. What do we have now:</p>
<ol>
<li>There is a JSON file with all the settings;</li>
<li>There is a REST service for its processing;</li>
<li>There is a script that will put the first into the second;</li>
<li>There is a pipeline that will do it all by itself.</li>
</ol>
<p>In short, a boot was rubbing a leg, and now it isn't. Yahoo!</p></description>
        </item>
        
        <item>
            <title>A Principle of Non-Judgemental Attitude</title>
            <link>https://kostyanetsky.me/notes/non-judgmental-attitude</link>
            <guid isPermaLink="false">note-non-judgmental-attitude</guid>
            <pubDate>Sun, 02 Sep 2018 16:36:53 +0700</pubDate>
            <description><p>There is a good <a href="http://maximilyahov.ru/blog/all/mne-ok/" target="_blank">note</a> from Maxim Ilyahov about a way of analyzing something which doesn't concern you but annoys you anyway. It's reminded me of an American principle of non-judgemental attitude which I read about a couple of years ago. As for me, it uses different words to make the same point.</p>
<p>By the way, this principle presents in Russia too — there is even a famous adage “don't be judgemental so you won't be judged”. What a pity for us that it isn't so widespread yet.</p></description>
        </item>
        
        <item>
            <title>Shaken, Not Stirred</title>
            <link>https://kostyanetsky.me/notes/shaken-not-stirred</link>
            <guid isPermaLink="false">note-shaken-not-stirred</guid>
            <pubDate>Sun, 07 Aug 2022 19:04:51 +0700</pubDate>
            <description><p>Let's speak a bit about organization of the code. If you need to describe a set of objects with common properties, think about whether this description should be divided into separate methods, each of which intended to describe one specific object?</p>
<p>Let's look at this example — a method that describes tabular parts of documents suitable for some task:</p>
<pre><code>SupportedTypes["Document.SupplierPricesEntering"]   = "Prices";
SupportedTypes["Document.OpeningBalancesEntering"]  = "CustomerAccounts,VendorAccounts";
SupportedTypes["Document.Requisition"]              = "InventoryAndServices";
</code></pre>
<p>Everything seems fine, right? Descriptions are there; tabular parts are listed; splitting them by comma doesn't look expensive at all.</p>
<p>However, there are many documents in the method. Eventually, some colleague (or you) will need to refer to another tabular part of the document, which is already mentioned in the method. Something will distract they, they will forget to look for an existing line and something like this will turn out:</p>
<pre><code>SupportedTypes["Document.SupplierPricesEntering"]   = "Prices";
SupportedTypes["Document.OpeningBalancesEntering"]  = "CustomerAccounts,VendorAccounts";
SupportedTypes["Document.Requisition"]              = "InventoryAndServices";

&lt;...&gt;

SupportedTypes["Document.OpeningBalancesEntering"]  = "PayrollDeductions";
</code></pre>
<p>As a result, a part of description will be erased, and it's good if the related functionality is covered by tests.</p>
<p>Conclusion? Well, you can write a helper method that will take the document type and the name of <strong>one</strong> table part as input. The helper will add items to the SupportedTypes map and ensure that the data already added is not lost.</p>
<p>However, if you need a better solution, then consider doing as I wrote at the beginning of this note: split the method into auxiliary methods. One method contains description for one document only (for all its tabular sections). Something like:</p>
<pre><code>Procedure AddOpeningBalancesEnteringDocument(SupportedTypes)

    TabularSections = New Array;

    TabularSections.Add("CustomerAccounts");
    TabularSections.Add("VendorAccounts");
    TabularSections.Add("PayrollDeductions");

    SupportedTypes["Document.Requisition"] = StrConcat(TabularSections, ",");

EndProcedure
</code></pre>
<p>What do we get here? Firstly, nobody will accidentally erase the description of the document. Secondly, SonarQube will be pleased: it is highly likely to begin swearing at repeating literals with the names of tabular parts, if the helper is implemented instead of code splitting.</p></description>
        </item>
        
        <item>
            <title>HPMoR</title>
            <link>https://kostyanetsky.me/notes/hpmor</link>
            <guid isPermaLink="false">note-hpmor</guid>
            <pubDate>Sun, 06 Nov 2016 15:32:00 +0700</pubDate>
            <description><p>Just finished reading “Harry Potter and Methods of Rationality” — the epic fanfic based on the you-know-whose universe. An author is a tough specialist in the field of artificial intelligence and interesting on his own, but his book is what I insistently <a href="http://hpmor.com/" target="_blank">recommend</a> to read.</p>
<p>First of all, it is the magnificent rethinking of the original saga. Many aspects seem not less fascinating, I may say; moreover, the plot itself is certainly excellent — I read two-thirds of the story without switching <a href="https://kostyanetsky.me/notes/hpmor/gene-wilder-meme.jpg" target="_blank">Gene Wilder</a> off :-) Nevertheless, the author was skillful enough to make all points meet and finish a storyline in such a pretty way that I had almost nothing to complain about.</p>
<p>In any case, this book is a well way to meet with a lot of scientific and just interesting things which were mentioned along the way. The author is smart and his book is a smart one too.</p></description>
        </item>
        
        <item>
            <title>Diablo</title>
            <link>https://kostyanetsky.me/notes/diablo</link>
            <guid isPermaLink="false">note-diablo</guid>
            <pubDate>Wed, 22 Sep 2021 21:25:48 +0700</pubDate>
            <description><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/kVd6qeWoAxg" width="560"></iframe>
<p>The nice episode of the “We Are Doomed” IT podcast about developer burnout. No insights, but you can hear something useful for yourself. I liked the analogy with video games, somewhere close to the middle:</p>
<blockquote>
<p>There was such a game — Diablo. RPG, all sorts of spells, you know. A character has mana and health, and when you have no mana to cast… Ha, I sound like a nerd! Well, nevermind. Briefly speaking, when you have no mana to cast, it's taken from your health.</p>
<p><em>— Doctor Cat</em></p>
</blockquote></description>
        </item>
        
        <item>
            <title>Message to User</title>
            <link>https://kostyanetsky.me/notes/message-to-user</link>
            <guid isPermaLink="false">note-message-to-user</guid>
            <pubDate>Mon, 30 Apr 2018 09:37:18 +0700</pubDate>
            <description><p>1C:Enterprise has a convenient and accustomed method of showing information for a user — it's a UserMessage object. It outputs messages at the bottom of a form and suddenly it's a potential problem. The thing is, most users don't look at it. It's like: well, I see no critical errors for now so there is nothing to worry about.</p>
<p>Therefore, in case an error happens or you just have an essential message, you should show it through a dialogue window — by the ShowQueryBox() method or a ShowMessageBox() method, for example. Otherwise, a user may not notice a problem and continue to work in spite of some action might not be executed or might be executed in a wrong way. The issue will come out later and you will be rightfully blamed for it.</p>
<p>In addition, using of a UserMessage object should be prohibited in case of small service forms. Yes, in fact, it's hard to overlook a text if a window is small, but that's a different matter: the messages below literally <a href="https://kostyanetsky.me/notes/message-to-user/en.png" target="_blank">devour</a> form's workspace and it becomes hard to work with.</p></description>
        </item>
        
    </channel>
</rss>