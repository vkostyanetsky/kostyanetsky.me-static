<rss version="2.0">
    <channel>    
        <title>Vlad Kostyanetsky</title>
        <description>Hello! My name is Vlad, I'm business app developer.</description>
        <language>en</language>
        <link>https://kostyanetsky.me</link>
        <lastBuildDate>Sat, 08 Jun 2024 18:28:35 +0700</lastBuildDate>
        
        <item>
            <title>Not Unique Metadata</title>
            <link>https://kostyanetsky.me/notes/data-history-duplication</link>
            <guid isPermaLink="false">note-data-history-duplication</guid>
            <pubDate>Sat, 08 Jun 2024 18:28:35 +0700</pubDate>
            <description><p>Once again, I came across a nasty bug when the platform broke the data history metadata table.</p>
<p>Outwardly, it looks like this: you update the database configuration, and when you try to restructure, the error “The data history metadata table contains duplicate records. Delete the duplicate records” pops up. The platform does not offer any clear way to find such records.</p>
<p><img alt="The data history metadata table contains duplicate records. Delete the duplicate records" src="https://kostyanetsky.me/notes/data-history-duplication/error.png"/></p>
<p>The problem can be solved at the database level. The table referenced by the error is _DataHistoryMetadata. It contains metadata versions of each object for which data history is being maintained. This allows the platform to understand what attributes the object had at any point in time if the data history is maintained for the object.</p>
<p>How it works? Well, when the list of an object’s attributes changes (for example, an attribute was added to the catalog), the platform writes its metadata: specifically, it adds a new entry to _DataHistoryMetadata and stores in it the current list of object attributes, as well as the version number of this list (for example, when history is enabled for an object, the first version of metadata is saved, when adding some attribute, the second version is saved, and so on).</p>
<p>The platform also puts a mark in the created record that this particular version of the object is the most actual, and then removes this mark from the version that was marked as actual before.</p>
<p>So, the problem is that the platform sometimes forgets to take the last step, and two versions appear in the table at once, marked as current. The Designer understands this but cannot do anything.</p>
<p>The solution follows from the algorithm above: you need to find conflicting versions and revoke the mark of actuality from the one that is older. It is better to use queries: data history is often enabled for a bunch of objects, and the list of their attributes is constantly changing - in general, there will be so many versions in the table that the devil will break his leg.</p>
<p>If you also encountered this problem and are therefore reading this text, you can use the <a href="https://gist.github.com/vkostyanetsky/6496c67e2b2fd3d064c4cafd16da0b79" target="_blank">queries</a> that I wrote:</p>
<ol>
<li>get-issues.sql checks that there is an issue: it looks for metadata versions that are also marked as actual.</li>
<li>fix-issues.sql removes the actuality mark from those versions that are actually outdated.</li>
</ol>
<p>Both queries are written for Microsoft SQL Server. If you use PostgreSQL, then <a href="https://gist.github.com/vkostyanetsky/75665ce04247e900743604eb386d1889" target="_blank">here they are</a> for this DBMS.</p>
<p>The queries will require slight adaptation to a specific database: they use the _fld626 field, which is the data separator. In your _DataHistoryMetadata table, this field may be called differently, so you need to update its name to the current one. It will be difficult to make a mistake - the table has only one field with the _fld prefix.</p>
<p>P.S. Please bear in mind that the license agreement prohibits access to the database, bypassing the platform’s tools, so you can only go for such experiments if there are no other options left.</p></description>
        </item>
        
        <item>
            <title>The Main Issue of UUID</title>
            <link>https://kostyanetsky.me/notes/uuid-main-issue</link>
            <guid isPermaLink="false">note-uuid-main-issue</guid>
            <pubDate>Sun, 02 Jun 2024 23:18:48 +0700</pubDate>
            <description><p>I came across a <a href="https://www.cybertec-postgresql.com/en/unexpected-downsides-of-uuid-keys-in-postgresql/" target="_blank">good text</a> about the main problem that UUID brings with itself. It is also relevant for 1C: all platform reference objects (catalog items, documents, and so on) have their own UUID. They are stored in a database, actively used in searches, and, of course, extensively indexed (with all the ensuing consequences).</p>
<p>1C tries to suppress the issue by creating consistent UUIDs. It may not be perfect, but overall, this thing works, and the indexes turn out to be more or less compact. In general, the community has been talking about this for a long time: for example, the old <a href="https://forum.mista.ru/topic.php?id=801986" target="_blank">thread on Mista</a> (though the conversation here quickly turned into a chicken coop, and out of six dozen comments, at most one and a half are on point).</p>
<p>P.S. The remark about the probability of creating two identical UUIDs in one database made me laugh:</p>
<blockquote>
<p>As an aside, for those worried about collisions: you should take up the lottery, since winning the jackpot twice in a row is a much more likely outcome than your system ever generating two identical random 128 bit numbers.</p>
</blockquote></description>
        </item>
        
        <item>
            <title>Screenshot With Sound</title>
            <link>https://kostyanetsky.me/notes/last-resort</link>
            <guid isPermaLink="false">note-last-resort</guid>
            <pubDate>Mon, 20 May 2024 00:03:07 +0700</pubDate>
            <description><p>Recently, we came up with the idea of dividing the internal ERP into several independent parts and organizing data exchange between them. We discussed the outlines of the task, the exchange model, transport, and roughly agreed on deadlines — in general, we did what we usually do.</p>
<p>I created a task for the stuff. We give them names in English, so I wrote in the first wording that came to mind.</p>
<p><img alt="Cut My Life Into Pieces" src="https://kostyanetsky.me/notes/last-resort/last-resort.png"/></p>
<p>The title came out with sound. Okay, this one is funny, but what should I call it then? Well, let it be Distributed Internal ERP. Abbreviated... DIE?</p>
<p>I let the first one be. Long live Papa Roach :)</p></description>
        </item>
        
        <item>
            <title>Timesheet for Obsidian</title>
            <link>https://kostyanetsky.me/notes/obsidian-timesheet</link>
            <guid isPermaLink="false">note-obsidian-timesheet</guid>
            <pubDate>Sun, 12 May 2024 17:50:58 +0700</pubDate>
            <description><p>I made another <a href="https://obsidian.md" target="_blank">Obsidian</a> plugin, this time for <a href="https://help.obsidian.md/Plugins/Daily+notes" target="_blank">daily notes</a>. Draws a nice report: what tasks I worked on, what I did, and how much time I spent. I tried to describe how it works in the <a href="https://github.com/vkostyanetsky/ObsidianTimesheet" target="_blank">repository</a>; will be glad if it is useful to someone else!</p>
<p>Funny thing: for the examples in the README, I used issue numbers FBI-1, FBI-2, and so on. This isn't a reference to the X-Files or Twin Peaks — it's just the first thing that came to mind. The fact is that our internal project for the development of FirstBit ERP is called First Bit Internal, abbreviated as FBI. The main pool of tasks we work on lives in it.</p>
<p>We’re already used to it, but our colleagues outside the company always find our screenshots from JIRA or SonarQube amusing. Did you imagine that you were Agent Cooper? Well, I almost don’t even need to :)</p></description>
        </item>
        
        <item>
            <title>One Query More, One Query Less</title>
            <link>https://kostyanetsky.me/notes/payment-terms</link>
            <guid isPermaLink="false">note-payment-terms</guid>
            <pubDate>Sun, 05 May 2024 21:25:48 +0700</pubDate>
            <description><p>One query more, one query less — it doesn’t matter, people often say. Like, the main thing is that the query must be cheap: it doesn’t read too much, uses index, and so on.</p>
<p>This point of view makes sense, but mindlessly machine-gunning queries is a dangerous idea. Even if everything looks good at the moment, the system may change slightly in the future. And then a seemingly harmless patch will burn your production server to the ground right on Friday.</p>
<p>Let me tell you about one example from recent practice. There is an ERP that contains a table with payment stages for customer orders. One of these stages is prepayment; until it is received, you cannot create an order for the supplier.</p>
<p>Technically, the purchase order simply stores the customer's order ID; if the field is filled (that is, if the purchase order is created by the customer's order), ERP needs to read the payment stages of the customer's order and understand whether the purchase can be made.</p>
<p>It sounds elementary, but monitoring shows that the operation is slow as hell and eats up memory as if it were the last time. </p>
<p>Welp, let's go find out. We saw something like this:</p>
<p><img alt="825701 records" src="https://kostyanetsky.me/notes/payment-terms/payment-terms.png"/></p>
<p>What do we have here? Instead of taking two or three stages of payment for an order, ERP reads almost a million! How this could be possible?</p>
<p>It turned out that the problem was with those purchase orders that were not related to customer orders at all. The developer considered that the logic for them could not be changed: the customer’s order ID is empty and the query will not find payment stages for this ID. This means that the same result will be obtained as if there were no query at all. And an extra query — well... One query more, one query less... Not a big deal.</p>
<p>The deal turned out to be big. The table of payment stages contained data not only for customer orders, but also for other types of documents. Their customer order ID field was empty. As a result, ERP, when trying to find payment stages using an empty customer order ID, unexpectedly found them.</p>
<p>The query read about a gigabyte of data and wrote it to a temporary table. A gigabyte was read, then a gigabyte was written... History hit the disk, the DBMS buffer cache, and other components of the system (even the network, which had to drive this gigabyte back and forth without any benefit).</p>
<p>Do you know what I think? If the result of a query is known, there is probably no need to do it after all.</p></description>
        </item>
        
        <item>
            <title>Foodiary for Obsidian</title>
            <link>https://kostyanetsky.me/notes/obsidian-foodiary</link>
            <guid isPermaLink="false">note-obsidian-foodiary</guid>
            <pubDate>Sun, 14 Apr 2024 22:36:58 +0700</pubDate>
            <description><p>Following my <a href="https://kostyanetsky.me/notes/obsidian-fastimer" target="_blank">first</a> plugin for Obsidian, I released <a href="https://github.com/vkostyanetsky/ObsidianFoodiary" target="_blank">the second one</a> a couple of weeks ago. Counts calories, proteins, fats, and carbohydrates in food. It helps not to overeat out of nowhere — it’s rather difficult to judge by eye how much you’ve eaten today and whether you can afford that donut.</p>
<p>In short, a useful thing if you:</p>
<ol>
<li>Fatty (like me)</li>
<li>Want to stop being fatty (like me)</li>
<li>You take notes in Obsidian (like me) 🙂</li>
</ol>
<p>In fact, there is a lot of software for this task. I tried some of them but was dissatisfied: it either has terrible design, is bugged, or is constantly trying to sell me a monthly subscription. In short, it's more annoying than helpful. I wanted something native, built into the usual routine; so, if routine settles in Obsidian, then the solution seems to suggest itself.</p>
<p>You can install the plugin directly from the program — the developers have already approved it. Otherwise, everything is simple: you write in a daily note what you ate and how much it weighed, and you receive a simple table sorted by calories with numbers by proteins, fats, and carbohydrates.</p>
<p>There are examples in the repository at the link above.</p></description>
        </item>
        
        <item>
            <title>Fastimer&#x27;s Look</title>
            <link>https://kostyanetsky.me/notes/callouts-for-fastimer</link>
            <guid isPermaLink="false">note-callouts-for-fastimer</guid>
            <pubDate>Sat, 09 Mar 2024 17:44:32 +0700</pubDate>
            <description><p>I just implemented <a href="https://kostyanetsky.me/notes/obsidian-fastimer" target="_blank">Fastimer</a>'s rendering through callouts: this is an Obsidian mechanic that allows you to turn an ordinary quote into a designed block of text that attracts the reader's attention. You've probably seen blocks like “advice” and “pay attention” — these are callouts.</p>
<p>You can read more in <a href="https://help.obsidian.md/Editing+and+formatting/Callouts" target="_blank">Obsidian Help</a>. </p>
<p>As a result, the timer now takes on a different color depending on the state: blue for an active fast, green for completed, and red for a failed one.</p>
<p>In addition, I made the text more compact and worked on styling:</p>
<p><img alt="Example" src="https://kostyanetsky.me/notes/callouts-for-fastimer/example.png"/></p>
<p>It turned out to be way nicer than the block of preformatted text as it was before.</p></description>
        </item>
        
        <item>
            <title>Small Pleasures</title>
            <link>https://kostyanetsky.me/notes/small-pleasures</link>
            <guid isPermaLink="false">note-small-pleasures</guid>
            <pubDate>Wed, 06 Mar 2024 21:22:43 +0700</pubDate>
            <description><p>I was wasting time at the supermarket checkout: it’s evening, there aren’t many customers anymore, but the elderly cashier is clearly tired and isn’t in too much of a hurry. Standing in front a tall, gray-haired man with a luxurious beard whiles away the time studying the rack of chocolates next to the cash register.</p>
<p>Finally, he takes a Snickers, twirls it in his hands thoughtfully. Then he pushes two more towards himself and, broadly, with visible pleasure, smiles into his mustache :)</p></description>
        </item>
        
        <item>
            <title>Not Only Everything</title>
            <link>https://kostyanetsky.me/notes/not-only-everything</link>
            <guid isPermaLink="false">note-not-only-everything</guid>
            <pubDate>Sun, 25 Feb 2024 22:49:48 +0700</pubDate>
            <description><p>This commentary in the documentation for the WriteJSON() method of XDTOSerializer is enviably deep, I would say:</p>
<p><img alt="Not only everyhing" src="https://kostyanetsky.me/notes/not-only-everything/write-json.jpg"/></p>
<p>Well, yes. The method dumps data into JSON, not XML. So it’s hard to argue that not all value types can be packed into XML using it (to be precise, none). Such a pity that there is an obvious copy-paste from the help for WriteXML() further in the text! I almost decided that it was an Easter egg from the developers :)</p></description>
        </item>
        
        <item>
            <title>Fastimer for Obsidian</title>
            <link>https://kostyanetsky.me/notes/obsidian-fastimer</link>
            <guid isPermaLink="false">note-obsidian-fastimer</guid>
            <pubDate>Tue, 13 Feb 2024 01:08:58 +0700</pubDate>
            <description><p>The <a href="https://obsidian.md/" target="_blank">Obsidian</a> developers recently approved one of my TypeScript pet plugins — <a href="https://github.com/vkostyanetsky/ObsidianFastimer" target="_blank">Fastimer</a>. It is an intermittent fasting tracker that adds a new code block to your vault: you enter the start date of the fasting interval and get the date of its finish, the time until this moment, and a list of the zones to be passed.</p>
<p>The block shows an up-to-date picture every time Obsidian renders it, which means you can monitor your progress in real time. When a fasting window ends, you can enter the end date, and the code block will show the result: whether you managed to achieve the goal, how much time you fasted beyond the plan, and so on.</p>
<p>I'm thinking of improving the visual part a bit (currently, everything is displayed as plain text without any design). In addition, I want to add functions for calculating statistics so that you can draw cute graphs like <a href="https://charts.phib.ro/Meta/Charts/Charts+Documentation" target="_blank">Charts </a> and show achievements. I already made the same in implementing the same <a href="https://github.com/vkostyanetsky/Fastimer" target="_blank">application</a> in Python, but I’m unlikely to return to it — it’s easier to solve the task in the Obsidian vault than to roll out an additional utility.</p>
<p>In short, check out the plugin! :) You can find it by name (Fastimer) in the Obsidian library, or install it manually from the repository.</p></description>
        </item>
        
    </channel>
</rss>